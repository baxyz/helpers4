name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  pull_request_target:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]

# Security: Only allow read permissions for pull_request_target
permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

env:
  WORKFLOW_ID: ${{ github.run_id }}
  ARTIFACT_PACKAGE: package-json-${{ github.run_id }}
  ARTIFACT_BUILD: build-output-${{ github.run_id }}

jobs:
  # Security check for external contributors
  security-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name != github.repository
    steps:
      - name: Check if PR is from external contributor
        run: |
          echo "::warning::This PR is from an external contributor. Manual review required before running CI."
          echo "::error::External PR detected. Workflow stopped for security."
          exit 1

  # Version calculation job
  version-calculation:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository)
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      version-changed: ${{ steps.version.outputs.changed }}
      status: ${{ steps.version.outputs.status }}
    
    steps:
      - name: Checkout and setup environment
        uses: ./.github/actions/checkout-and-download
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          node-version: '20'

      - name: Calculate version for PR
        id: version
        run: |
          echo "Calculating version for PR validation..."
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # For PR validation, we calculate what the version would be but don't change it
          # This helps validate the version calculation logic
          if git log --oneline HEAD...origin/main | grep -E "^[a-f0-9]+ (feat|fix|BREAKING CHANGE)" >/dev/null 2>&1; then
            echo "Version calculation completed (changes detected)"
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "No version-affecting changes detected"
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Upload package.json artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_PACKAGE }}
          path: package.json
          retention-days: 1

  # Build job with matrix strategy (depends on version calculation)
  build:
    runs-on: ubuntu-latest
    needs: version-calculation
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository)
    
    strategy:
      matrix:
        node-version: [18, 20, 22]
      fail-fast: false
    
    outputs:
      build-success: ${{ steps.build.outputs.status }}
      
    steps:
      - name: Checkout and download artifacts
        uses: ./.github/actions/checkout-and-download
        with:
          download-package: 'true'
          artifact-package-name: ${{ env.ARTIFACT_PACKAGE }}

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run tests
        id: test
        uses: ./.github/actions/run-tests
        with:
          test-type: 'test'
          node-version: ${{ matrix.node-version }}

      - name: Run build
        id: build
        uses: ./.github/actions/run-tests
        with:
          test-type: 'build'
          node-version: ${{ matrix.node-version }}

      # Only upload build artifact from Node.js 20 to avoid duplicates
      - name: Upload build artifact
        if: matrix.node-version == '20' && steps.build.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_BUILD }}
          path: |
            build/
            dist/
          retention-days: 1

  # Parallel security jobs
  security:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository)
    
    outputs:
      security-status: ${{ steps.security.outputs.audit-status }}
      
    steps:
      - name: Checkout and setup environment
        uses: ./.github/actions/checkout-and-download

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Run security audit
        id: security
        uses: ./.github/actions/security-scan
        with:
          scan-type: 'audit'

  security-scan:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository)
    
    outputs:
      scan-status: ${{ steps.scan.outputs.sensitive-data-status }}
      
    steps:
      - name: Checkout and setup environment
        uses: ./.github/actions/checkout-and-download

      - name: Run sensitive data scan
        id: scan
        uses: ./.github/actions/security-scan
        with:
          scan-type: 'sensitive-data'

  # Parallel validation jobs
  lint:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository)
    
    outputs:
      lint-status: ${{ steps.lint.outputs.status }}
      
    steps:
      - name: Checkout and setup environment
        uses: ./.github/actions/checkout-and-download

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Run linting
        id: lint
        uses: ./.github/actions/run-tests
        with:
          test-type: 'lint'

  type-check:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository)
    
    outputs:
      typecheck-status: ${{ steps.typecheck.outputs.status }}
      
    steps:
      - name: Checkout and setup environment
        uses: ./.github/actions/checkout-and-download

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Run TypeScript check
        id: typecheck
        uses: ./.github/actions/run-tests
        with:
          test-type: 'typecheck'

  commit-validation:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository)
    
    outputs:
      commit-status: ${{ steps.validate.outputs.status }}
      invalid-count: ${{ steps.validate.outputs.invalid-count }}
      
    steps:
      - name: Checkout and setup environment
        uses: ./.github/actions/checkout-and-download
        with:
          fetch-depth: 0

      - name: Validate commit messages
        id: validate
        uses: ./.github/actions/validate-commits
        with:
          base-branch: 'main'

  # Verification job (depends on build)
  verification:
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository)
    
    outputs:
      coherency-status: ${{ steps.coherency.outputs.status }}
      bundle-size-status: ${{ steps.bundle.outputs.status }}
      
    steps:
      - name: Checkout and download artifacts
        uses: ./.github/actions/checkout-and-download
        with:
          download-package: 'true'
          download-build: 'true'
          artifact-package-name: ${{ env.ARTIFACT_PACKAGE }}
          artifact-build-name: ${{ env.ARTIFACT_BUILD }}

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Run coherency tests
        id: coherency
        uses: ./.github/actions/run-tests
        with:
          test-type: 'coherency'

      - name: Analyze bundle size
        id: bundle
        run: |
          echo "Analyzing bundle size..."
          
          if [ -d "build" ] || [ -d "dist" ]; then
            TOTAL_SIZE=$(du -sh build/ dist/ 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
            echo "Bundle size: ${TOTAL_SIZE}"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "No build output found for size analysis"
            echo "status=skipped" >> $GITHUB_OUTPUT
          fi

  # Final PR comment job (depends on all other jobs)
  pr-comment:
    runs-on: ubuntu-latest
    needs: [version-calculation, build, security, security-scan, lint, type-check, commit-validation, verification]
    if: |
      always() && 
      (github.event_name == 'pull_request' || 
       (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository))
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update PR comment
        uses: ./.github/actions/pr-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          version-status: ${{ needs.version-calculation.outputs.status || 'unknown' }}
          build-status: ${{ needs.build.outputs.build-success || 'unknown' }}
          security-status: ${{ needs.security.outputs.security-status || 'unknown' }}
          security-scan-status: ${{ needs.security-scan.outputs.scan-status || 'unknown' }}
          lint-status: ${{ needs.lint.outputs.lint-status || 'unknown' }}
          typecheck-status: ${{ needs.type-check.outputs.typecheck-status || 'unknown' }}
          commit-status: ${{ needs.commit-validation.outputs.commit-status || 'unknown' }}
          coherency-status: ${{ needs.verification.outputs.coherency-status || 'unknown' }}
          bundle-size-status: ${{ needs.verification.outputs.bundle-size-status || 'unknown' }}
